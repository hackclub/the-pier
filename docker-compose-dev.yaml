services:
  reverse-proxy:
    expose:
      - "8080"
    ports:
      - "80:80"
    command:
      - --api.insecure=true
      - --entryPoints.web.address=:80
    labels:
      - "traefik.enable=true"
      - "traefik.port=8080"
      - "traefik.http.routers.traefik.rule=Host(`traefik.workadventure.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      default:
        aliases:
          - "front.workadventure.localhost"
          - "play.workadventure.localhost"
          - "room-api.workadventure.localhost"
          - "maps.workadventure.localhost"
          - "oidc.workadventure.localhost"
          - "map-storage.workadventure.localhost"
          - "xmpp.workadventure.localhost"
          - "matrix.workadventure.localhost"
          - "pusher.workadventure.localhost"

  play:
    image: thecodingmachine/nodejs:v2-20-bullseye
    command: npm run dev
    # Uncomment to run the production build in dev (along STARTUP_COMMAND_4 and NODE_OPTIONS)
    #command: npm run start
    # Uncomment to run the production build in dev (along STARTUP_COMMAND_4 and NODE_OPTIONS)
    #command: npm run start
    working_dir: /usr/src/app/play
    volumes:
      - .:/usr/src/app
    tmpfs: /tmp
    ports:
      - "9231:9229"
      - "9235:9235"
    environment:
      # On startup, we ask the messages container to regenerate the files.
      # Note: we need to use this "messages" container because of ARM64 processors that are not supported with protoc (used in "messages" container)
      STARTUP_COMMAND_1: ../wait-proto.sh
      STARTUP_COMMAND_2: ../npm-install.sh
      STARTUP_COMMAND_3: npm run typesafe-i18n
      # Uncomment to run the production build in dev
      #STARTUP_COMMAND_4: npm run build
      #STARTUP_COMMAND_5: npm run build-iframe-api
      #NODE_OPTIONS: --max-old-space-size=16384
      DEBUG: "socket,space"
      DEBUG_COLORS: "true"
      DEBUG_ERROR_MESSAGES: "true"
      HOST: "0.0.0.0"
      NODE_ENV: development
      ALLOWED_CORS_ORIGIN: "http://play.workadventure.localhost"
      VITE_URL: "http://front.workadventure.localhost"
      PUSHER_URL: http://play.workadventure.localhost
      FRONT_URL: http://play.workadventure.localhost
      UPLOADER_URL: http://uploader.workadventure.localhost
      ICON_URL: http://icon.workadventure.localhost
      MAP_STORAGE_API_TOKEN: "FFVSGBSGBSGFB23SFGBSFG4BS"
      #Map editor
      PUBLIC_MAP_STORAGE_URL: "http://map-storage.workadventure.localhost"
      #Chat
      MATRIX_API_URI: http://synapse:8008/
      MATRIX_PUBLIC_URI: http://matrix.workadventure.localhost
      MATRIX_DOMAIN: matrix.workadventure.localhost
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.front.rule=Host(`front.workadventure.localhost`)"
      - "traefik.http.routers.front.service=front"
      - "traefik.http.services.front.loadbalancer.server.port=8080"

      - "traefik.http.routers.room-api.rule=Host(`room-api.workadventure.localhost`)"
      - "traefik.http.routers.room-api.service=room-api"
      - "traefik.http.services.room-api.loadbalancer.server.port=50051"
      - "traefik.http.services.room-api.loadbalancer.server.scheme=h2c"

      - "traefik.http.routers.play.rule=HostRegexp(`{domain:.*}`)"
      - "traefik.http.routers.play.priority=1"
      - "traefik.http.routers.play.service=play"
      - "traefik.http.services.play.loadbalancer.server.port=3000"

      - "traefik.http.routers.play-ws.rule=HostRegexp(`{domain:.*}`) && PathPrefix(`/ws/`)"
      - "traefik.http.routers.play-ws.priority=2"
      - "traefik.http.routers.play-ws.service=play-ws"
      - "traefik.http.services.play-ws.loadbalancer.server.port=3001"

  maps:
    image: thecodingmachine/php:8.1-v4-apache-node12
    environment:
      DEBUG_MODE: "$DEBUG_MODE"
      HOST: "0.0.0.0"
      NODE_ENV: development
      FRONT_URL: http://play.workadventure.localhost
      #APACHE_DOCUMENT_ROOT: dist/
      #APACHE_EXTENSIONS: headers
      #APACHE_EXTENSION_HEADERS: 1
      STARTUP_COMMAND_0: sudo a2enmod headers
      STARTUP_COMMAND_1: yarn install
    volumes:
      - ./maps:/var/www/html
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maps.rule=Host(`maps.workadventure.localhost`)"
      - "traefik.http.routers.maps.entryPoints=web,traefik"
      - "traefik.http.services.maps.loadbalancer.server.port=80"

  back:
    image: thecodingmachine/nodejs:v2-20-bullseye
    command: npm run dev
    working_dir: /usr/src/app/back
    environment:
      DEBUG: "*"
      PLAY_URL: http://play.workadventure.localhost
      # On startup, we ask the messages container to regenerate the files.
      # Note: we need to use this "messages" container because of ARM64 processors that are not supported with protoc (used in "messages" container)
      #STARTUP_COMMAND_0: touch /usr/src/app/back/src/Messages/generate_request/need_regenerate
      STARTUP_COMMAND_1: ../wait-proto.sh
      STARTUP_COMMAND_2: ../npm-install.sh
      # wait for files to be generated by "messages" container
      #STARTUP_COMMAND_2: while [ -f /usr/src/app/back/src/Messages/generate_request/need_regenerate ]; do sleep 1; done
      NODE_ENV: development
      PUBLIC_MAP_STORAGE_URL: "http://map-storage.workadventure.localhost"
    volumes:
      - .:/usr/src/app
    tmpfs: /tmp
    ports:
      - "9232:9229"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.back.rule=Host(`api.workadventure.localhost`)"
      - "traefik.http.routers.back.entryPoints=web"
      - "traefik.http.services.back.loadbalancer.server.port=8080"

  map-storage:
    image: thecodingmachine/nodejs:v2-22-bullseye
    command: npm run start:dev
    #command: npm run profile
    working_dir: /usr/src/app/map-storage
    environment:
      #DEBUG: "*"
      STARTUP_COMMAND_1: ../wait-proto.sh
      STARTUP_COMMAND_2: ../npm-install.sh
      NODE_ENV: development
      ENABLE_BASIC_AUTHENTICATION: "true"
      AUTHENTICATION_USER: "john.doe"
      AUTHENTICATION_PASSWORD: "password"
      ENABLE_BEARER_AUTHENTICATION: "true"
      AUTHENTICATION_TOKEN: "123"
      API_URL: back:50051
      # Sentry integration
      SENTRY_DSN: $SENTRY_DSN_MAPSTORAGE
      SENTRY_ENVIRONMENT: $SENTRY_ENVIRONMENT
      SENTRY_RELEASE: $SENTRY_RELEASE
      PATH_PREFIX: ""
      MAP_STORAGE_API_TOKEN: "FFVSGBSGBSGFB23SFGBSFG4BS"
      PUSHER_URL: http://play.workadventure.localhost
    volumes:
      - .:/usr/src/app
    tmpfs: /tmp
    ports:
      - "9233:9229"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.map-storage.rule=Host(`map-storage.workadventure.localhost`)"
      - "traefik.http.routers.map-storage.entryPoints=web"
      - "traefik.http.routers.map-storage.service=map-storage"
      - "traefik.http.services.map-storage.loadbalancer.server.port=3000"
      - "traefik.http.routers.map-storage-ui.rule=Host(`map-storage.workadventure.localhost`) && PathPrefix(`/ui/`)"
      - "traefik.http.routers.map-storage-ui.entryPoints=web"
      - "traefik.http.routers.map-storage-ui.service=map-storage-ui"
      - "traefik.http.services.map-storage-ui.loadbalancer.server.port=8080"

  uploader:
    image: thecodingmachine/nodejs:v2-20-bullseye
    command: npm run dev
    #command: npm run profile
    working_dir: /usr/src/app/uploader
    environment:
      DEBUG: "*"
      STARTUP_COMMAND_1: ../npm-install.sh
      UPLOADER_URL: http://uploader.workadventure.localhost
    volumes:
      - .:/usr/src/app
    tmpfs: /tmp
    ports:
      - "9234:9229"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uploader.rule=Host(`uploader.workadventure.localhost`)"
      - "traefik.http.routers.uploader.entryPoints=web"
      - "traefik.http.services.uploader.loadbalancer.server.port=8080"

  messages:
    image: thecodingmachine/nodejs:v2-20-bullseye-build
    environment:
      STARTUP_COMMAND_1: npm install
      STARTUP_COMMAND_2: npm run proto:watch
    volumes:
      - ./messages:/usr/src/app
      - ./back:/usr/src/back
      - ./play:/usr/src/play
      #- ./chat:/usr/src/chat
      - ./map-storage:/usr/src/map-storage
      - ./libs:/usr/src/libs

  redisinsight:
    image: redislabs/redisinsight:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redisinsight.rule=Host(`redis.workadventure.localhost`)"
      - "traefik.http.routers.redisinsight.entryPoints=web"
      - "traefik.http.services.redisinsight.loadbalancer.server.port=8001"

  icon:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.icon.rule=Host(`icon.workadventure.localhost`)"
      - "traefik.http.routers.icon.entryPoints=web"
      - "traefik.http.services.icon.loadbalancer.server.port=8080"

  # A mock server to test OpenID connect connectivity
  oidc-server-mock:
    image: ghcr.io/soluto/oidc-server-mock:0.7.0
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      SERVER_OPTIONS_INLINE: |
        {
          "AccessTokenJwtType": "JWT",
          "Discovery": {
            "ShowKeySet": true
          },
          "Authentication": {
            "CookieSameSiteMode": "Lax",
            "CheckSessionCookieSameSiteMode": "Lax"
          }
        }
      LOGIN_OPTIONS_INLINE: |
        {
          "AllowRememberLogin": false
        }
      LOGOUT_OPTIONS_INLINE: |
        {
          "AutomaticRedirectAfterSignOut": true
        }
      API_SCOPES_INLINE: |
        - Name: tags
          UserClaims:
            - tags-scope
      API_RESOURCES_INLINE: |
        - Name: some-app
          Scopes:
            - some-app-scope-1
            - tags-scope
          UserClaims:
            - tags
      USERS_CONFIGURATION_INLINE: |
        [
          {
            "SubjectId":"1",
            "Username":"User1",
            "Password":"pwd",
            "Claims": [
              {
                "Type": "name",
                "Value": "John Doe",
                "ValueType": "string",
              },
              {
                "Type": "email",
                "Value": "john.doe@example.com",
                "ValueType": "string"
              },
              {
                "Type": "tags",
                "Value": "[\"admin\"]",
                "ValueType": "json"
              },
            ]
          },
          {
            "SubjectId":"2",
            "Username":"User2",
            "Password":"pwd",
            "Claims": [
              {
                "Type": "name",
                "Value": "Alice Doe",
                "ValueType": "string",
              },
              {
                "Type": "email",
                "Value": "alice.doe@example.com",
                "ValueType": "string"
              },
              {
                "Type": "tags",
                "Value": "[\"member\"]",
                "ValueType": "json"
              },
            ]
          }
        ]
      IDENTITY_RESOURCES_INLINE: |
        [
          {
            "Name": "tags-scope",
            "ClaimTypes": ["tags"]
          }
        ]
      CLIENTS_CONFIGURATION_PATH: /tmp/config/clients-config.json
    volumes:
      - ./contrib/oidc-server-mock:/tmp/config:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.oidc.rule=Host(`oidc.workadventure.localhost`)"
      - "traefik.http.routers.oidc.entryPoints=web"
    healthcheck:
      #disable: true
      timeout: 5s
    # A mock server to test OpenID connect connectivity

  synapse:
    image: matrixdotorg/synapse:v1.115.0
    entrypoint: /data/start.sh
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.matrix.rule=Host(`matrix.workadventure.localhost`)"
      - "traefik.http.routers.matrix.entryPoints=web"
      - "traefik.http.services.matrix.loadbalancer.server.port=8008"
      - "traefik.http.routers.matrix.service=matrix"
    volumes:
      - ./synapse:/data/
      #- ./synapse/homeserver.template.yaml:/data/homeserver.template.yaml
      - ./synapse/federation:/etc/nginx/vhost.d/matrix.workadventure.localhost
    environment:
      VIRTUAL_HOST: "matrix.workadventure.localhost"
      VIRTUAL_PORT: 8008
      LETSENCRYPT_HOST: "matrix.workadventure.localhost"
      SYNAPSE_SERVER_NAME: "matrix.workadventure.localhost"
      SYNAPSE_REPORT_STATS: "yes"
      MATRIX_ADMIN_USER: admin
      MATRIX_ADMIN_PASSWORD: MySecretPassword
      JWT_SECRET: "$SECRET_KEY"

#  coturn:
#    image: coturn/coturn:4.5.2
#    command:
#      - turnserver
#      #- -c=/etc/coturn/turnserver.conf
#      - --log-file=stdout
#      - --external-ip=$$(detect-external-ip)
#      - --listening-port=3478
#      - --min-port=10000
#      - --max-port=10010
#      - --tls-listening-port=5349
#      - --listening-ip=0.0.0.0
#      - --realm=coturn.workadventure.localhost
#      - --server-name=coturn.workadventure.localhost
#      - --lt-cred-mech
#      # Enable Coturn "REST API" to validate temporary passwords.
#      #- --use-auth-secret
#      #- --static-auth-secret=SomeStaticAuthSecret
#      #- --userdb=/var/lib/turn/turndb
#      - --user=workadventure:WorkAdventure123
#      # use real-valid certificate/privatekey files
#      #- --cert=/root/letsencrypt/fullchain.pem
#      #- --pkey=/root/letsencrypt/privkey.pem
#    network_mode: host
#volumes:
#  synapsedata:

